// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/proto/music.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MusicService_StreamMusic_FullMethodName = "/music.MusicService/StreamMusic"
	MusicService_SearchMusic_FullMethodName = "/music.MusicService/SearchMusic"
	MusicService_UploadMusic_FullMethodName = "/music.MusicService/UploadMusic"
)

// MusicServiceClient is the client API for MusicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicServiceClient interface {
	// Stream de música
	StreamMusic(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AudioChunk], error)
	// Busca de músicas
	SearchMusic(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// Upload de música
	UploadMusic(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadRequest, UploadResponse], error)
}

type musicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicServiceClient(cc grpc.ClientConnInterface) MusicServiceClient {
	return &musicServiceClient{cc}
}

func (c *musicServiceClient) StreamMusic(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AudioChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MusicService_ServiceDesc.Streams[0], MusicService_StreamMusic_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, AudioChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MusicService_StreamMusicClient = grpc.ServerStreamingClient[AudioChunk]

func (c *musicServiceClient) SearchMusic(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, MusicService_SearchMusic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) UploadMusic(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadRequest, UploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MusicService_ServiceDesc.Streams[1], MusicService_UploadMusic_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadRequest, UploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MusicService_UploadMusicClient = grpc.ClientStreamingClient[UploadRequest, UploadResponse]

// MusicServiceServer is the server API for MusicService service.
// All implementations must embed UnimplementedMusicServiceServer
// for forward compatibility.
type MusicServiceServer interface {
	// Stream de música
	StreamMusic(*StreamRequest, grpc.ServerStreamingServer[AudioChunk]) error
	// Busca de músicas
	SearchMusic(context.Context, *SearchRequest) (*SearchResponse, error)
	// Upload de música
	UploadMusic(grpc.ClientStreamingServer[UploadRequest, UploadResponse]) error
	mustEmbedUnimplementedMusicServiceServer()
}

// UnimplementedMusicServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMusicServiceServer struct{}

func (UnimplementedMusicServiceServer) StreamMusic(*StreamRequest, grpc.ServerStreamingServer[AudioChunk]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMusic not implemented")
}
func (UnimplementedMusicServiceServer) SearchMusic(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMusic not implemented")
}
func (UnimplementedMusicServiceServer) UploadMusic(grpc.ClientStreamingServer[UploadRequest, UploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadMusic not implemented")
}
func (UnimplementedMusicServiceServer) mustEmbedUnimplementedMusicServiceServer() {}
func (UnimplementedMusicServiceServer) testEmbeddedByValue()                      {}

// UnsafeMusicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicServiceServer will
// result in compilation errors.
type UnsafeMusicServiceServer interface {
	mustEmbedUnimplementedMusicServiceServer()
}

func RegisterMusicServiceServer(s grpc.ServiceRegistrar, srv MusicServiceServer) {
	// If the following call pancis, it indicates UnimplementedMusicServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MusicService_ServiceDesc, srv)
}

func _MusicService_StreamMusic_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MusicServiceServer).StreamMusic(m, &grpc.GenericServerStream[StreamRequest, AudioChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MusicService_StreamMusicServer = grpc.ServerStreamingServer[AudioChunk]

func _MusicService_SearchMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).SearchMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_SearchMusic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).SearchMusic(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_UploadMusic_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MusicServiceServer).UploadMusic(&grpc.GenericServerStream[UploadRequest, UploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MusicService_UploadMusicServer = grpc.ClientStreamingServer[UploadRequest, UploadResponse]

// MusicService_ServiceDesc is the grpc.ServiceDesc for MusicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MusicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "music.MusicService",
	HandlerType: (*MusicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchMusic",
			Handler:    _MusicService_SearchMusic_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMusic",
			Handler:       _MusicService_StreamMusic_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadMusic",
			Handler:       _MusicService_UploadMusic_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/proto/music.proto",
}
